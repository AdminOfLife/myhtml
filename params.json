{"name":"Myhtml","tagline":"HTML Parser on Pure C with POSIX Threads Support","body":"# MyHTML C/C++ HTML 5 Parser. Using threads.\r\n\r\n[![Build Status](https://travis-ci.org/lexborisov/myhtml.svg?branch=master)](https://travis-ci.org/lexborisov/myhtml)\r\n\r\nMyHTML is a fast HTML Parser using Threads implemented as a pure C99 library with no outside dependencies.\r\n\r\n## Now\r\n\r\n```text\r\nThe current version is 0.4.5 - this is a beta version\r\nRelease will have major version number 1\r\n```\r\n\r\n## Features\r\n\r\n- Asynchronous Parsing, Build Tree and Indexation\r\n- Fully conformant with the [HTML5 specification]\r\n- Two API - [high] and [low]-level\r\n- Manipulation of elements: add, change, delete and other\r\n- Manipulation of elements attributes: add, change, delete and other\r\n- Support 34 character encoding by specification [encoding.spec.whatwg.org]\r\n- Support detecting character encodings\r\n- Support Single Mode parsing\r\n- Support for fragment parsing\r\n- Support for [parsing by chunks]\r\n- No outside dependencies\r\n- C99 support\r\n- Passes all tree construction tests from [html5lib-tests]\r\n\r\n## Support encodings for InputStream\r\n\r\n```text\r\nX_USER_DEFINED, UTF_8, UTF_16LE, UTF_16BE, BIG5, EUC_KR, GB18030,\r\nIBM866, ISO_8859_10, ISO_8859_13, ISO_8859_14, ISO_8859_15, ISO_8859_16, ISO_8859_2, ISO_8859_3,\r\nISO_8859_4, ISO_8859_5, ISO_8859_6, ISO_8859_7, ISO_8859_8, KOI8_R, KOI8_U, MACINTOSH,\r\nWINDOWS_1250, WINDOWS_1251, WINDOWS_1252, WINDOWS_1253, WINDOWS_1254, WINDOWS_1255, WINDOWS_1256,\r\nWINDOWS_1257, WINDOWS_1258, WINDOWS_874, X_MAC_CYRILLIC\r\n```\r\n\r\n## Support encodings for output\r\n\r\n**Program working in UTF-8 and returns all in UTF-8**\r\n\r\n## Detecting character encodings\r\n\r\nNow it UTF-8, UTF-16LE, UTF16BE and russian windows-1251,  koi8-r, iso-8859-5, x-mac-cyrillic, ibm866\r\n\r\n## Build and Installation\r\n\r\n**Make**\r\n\r\n```bash\r\nmake\r\n```\r\n\r\nIf successful copy lib/* and include/* at the right place for you\r\n\r\n```bash\r\ncp lib/* /usr/local/lib\r\ncp -r include/* /usr/local/include\r\n```\r\n\r\n**CMake**\r\n\r\nIn myhtml/project directory:\r\n\r\n```bash\r\ncmake .\r\nmake\r\nsudo make install\r\n```\r\n\r\nFlags that can be passed to CMake:\r\n- `MyHTML_OPTIMIZATION_LEVEL=-O2` set compiler optimization level. Default: -O2\r\n- `CMAKE_INSTALL_LIBDIR=lib` set path to install created library. Default: lib\r\n- `MyHTML_BUILD_SHARED=ON` build shared library. Default: ON\r\n- `MyHTML_BUILD_STATIC=ON` build static library. Default: ON\r\n- `MyHTML_INSTALL_HEADER=OFF` install header files. Default OFF\r\n\r\n*for example*\r\n```bash\r\ncmake . -DCMAKE_INSTALL_LIBDIR=lib64 -DMyHTML_INSTALL_HEADER=ON\r\n```\r\n\r\n\r\n## Build with your program\r\n\r\nI advise to build using clang, but decided to show examples of gcc\r\n\r\n**for example**\r\n\r\n*build with shared library*\r\n```bash\r\ngcc -Wall -Werror -O2 -lmyhtml your_program.c -o your_program\r\n```\r\n\r\n*build with static library*\r\n```bash\r\ngcc -Wall -Werror -O2 your_program.c /path/to/static_libmyhtml.a -o your_program\r\n```\r\n\r\n## Future\r\n\r\nWorks are in full swing\r\n\r\n- make test && make install\r\n- Build in Windows OS\r\n- external bindings (Perl, PHP, Python, Erlang, Node.js, C#, R, Ruby, Rust and other)\r\n- ...\r\n- css parsing && selectors (is ready, but I do not like it and will remodel)\r\n- html render without js (in fact, he is ready, we do refactoring before publication, see previous)\r\n\r\n## Dependencies\r\n\r\nNone\r\n\r\n## In other languages, external bindings\r\n\r\n- [Perl 5] module\r\n\r\n\r\n## Examples\r\n\r\nSee [examples] directory\r\n\r\n**Simple example**\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n\r\n#include <myhtml/api.h>\r\n\r\nint main(int argc, const char * argv[])\r\n{\r\n    char html[] = \"<div><span>HTML</span></div>\";\r\n    \r\n    // basic init\r\n    myhtml_t* myhtml = myhtml_create();\r\n    myhtml_init(myhtml, MyHTML_OPTIONS_DEFAULT, 1, 0);\r\n    \r\n    // first tree init \r\n    myhtml_tree_t* tree = myhtml_tree_create();\r\n    myhtml_tree_init(tree, myhtml);\r\n    \r\n    // parse html\r\n    myhtml_parse(tree, MyHTML_ENCODING_UTF_8, html, strlen(html));\r\n    \r\n    // release resources\r\n    myhtml_tree_destroy(tree);\r\n    myhtml_destroy(myhtml);\r\n    \r\n    return 0;\r\n}\r\n```\r\n\r\n## AUTHOR\r\n\r\nAlexander Borisov <lex.borisov@gmail.com>\r\n\r\n## COPYRIGHT AND LICENSE\r\n\r\nCopyright 2015-2016 Alexander Borisov\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and limitations under the License.\r\n\r\n\r\n[HTML5 specification]: https://html.spec.whatwg.org/multipage/\r\n[high]: https://github.com/lexborisov/myhtml/blob/master/include/myhtml/api.h\r\n[low]: https://github.com/lexborisov/myhtml/tree/master/include/myhtml\r\n[examples]: https://github.com/lexborisov/myhtml/tree/master/examples\r\n[parsing by chunks]: https://github.com/lexborisov/myhtml/blob/master/examples/chunks_high_level.c\r\n[encoding.spec.whatwg.org]: https://encoding.spec.whatwg.org/\r\n[html5lib-tests]: https://github.com/html5lib/html5lib-tests\r\n[Perl 5]: https://metacpan.org/release/HTML-MyHTML\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}